#!/bin/bash
#SBATCH --job-name=completePrec
#SBATCH -o runscript.solve.1.log
#SBATCH -e runscript.solve.1.err
#SBATCH -n 512   # Change on setUp as well
#SBATCH -p multi      
#SBATCH -t 48:00:00
#SBATCH --mem=150G
#SBATCH --mail-type=ALL



# This file should split the run into two stages
# Stage 1 - Run the solver from time 0 to quasi-equilibrium.
# Stage 2 - Run the solver from where it finished and enable the boundaryData function so that
#           data can be used in future runs with wind turbines.


source /nobackup/ptjh72/OpenFOAM/SOWFA-6/environmentScripts/Durham_environment
SOWFA_DURHAM



# User input.
cores=512
initializer=setFieldsABL
solver=superDeliciousVanilla
runNumber=1
startTime=0
endTimeBeforeBdData=20000                      # Time that it reaches quasi-equilibrium, specified
startTimeBdData=$endTimeBeforeBdData
endTimeBdData=22000





echo "Starting OpenFOAM job at: " $(date)
echo "using " $cores " cores"
echo "with modules:"
module list



cd system
rm controlDict
ln -s controlDict.$runNumber controlDict
cd ..

latestTime=$(foamListTimes -processor -latestTime -withZero -noFunctionObjects | tail -1)


# Run the flow field initializer (parallel)
if [ $runNumber -eq 1 ]
   then
   mpirun $initializer -parallel > log.$runNumber.$initializer 2>&1
fi


# If latest time is less than endTimeBeforeBdData then don't sample boundaryData, set the start time to the
# latest time, which will be 0 for run number 1.
# Run the solver until the latest time is no longer less than endTimeBeforeBdData

if [ $latestTime -lt $endTimeBeforeBdData ]; then 
	foamDictionary -entry "boundaryData.enabled" -set "false" system/sampling/boundaryData
	foamDictionary -entry "startTime" -set $latestTime -disableFunctionEntries system/controlDict
        foamDictionary -entry "endTime" -set $endTimeBeforeBdData -disableFunctionEntries system/controlDict

	# Run the solver (parallel)
	mpirun $solver -parallel > log.$runNumber.$solver.startat$latestTime 2>&1
fi


# Check that processor0/$starTimeBdData exists and that no reconstructing has been done yet
# Reconstruct some fields in ascii format to act as the initial conditions when the run continues

if [ -d processor0/$startTimeBdData ] && [ ! -f log.3.reconstructPar ]; then
	foamDictionary -entry "writeFormat" -set ascii -disableFunctionEntries system/controlDict
        reconstructPar -time $startTimeBdData -fields '(U T k p_rgh kappat nut qwall Rwall)'> log.3.reconstructPar 2>&1
	# The z0 gets recomposed as 0, sometimes with '-nan` values. This is a known bug. Workaround below
        z0=$(foamDictionary -entry "z0" -value setUp)
        sed -i 's/-nan/0/g' $startTimeBdData/Rwall
	foamDictionary -entry "boundaryField.lower.z0" -set $z0 $startTimeBdData/Rwall
        foamDictionary -entry "writeFormat" -set binary -disableFunctionEntries system/controlDict
else
    touch "WARNING_4"
    echo "Case not reconstructed and first time of boundaryData not fixed. Check if endTime dir exists."
fi


# Set the time that the run is continuing from
# Enable boundaryData sampling
# Change startTime and endTime in controlDict
# Continue the run until endTime

continueTime=$(( $latestTime > $endTimeBeforeBdData ? $latestTime : $startTimeBdData ))
foamDictionary -entry "boundaryData.enabled"       -set "true" system/sampling/boundaryData
foamDictionary -entry "startTime" -set $continueTime -disableFunctionEntries system/controlDict
foamDictionary -entry "endTime" -set $endTimeBdData -disableFunctionEntries system/controlDict
mpirun $solver -parallel > log.$runNumber.$solver.startat$continueTime 2>&1





echo "Ending OpenFOAM job at: " $(date)
