#!/bin/bash
#SBATCH --job-name=preprocess
#SBATCH -o runscript.preprocess.log
#SBATCH -e runscript.preprocess.err
#SBATCH -n 1
#SBATCH -p multi
#SBATCH -t 5:00:00
#SBATCH --mem=60G
#SBATCH --mail-type=ALL



source /home/ptjh72/OpenFOAM/SOWFA-6/environmentScripts/Durham_environment
SOWFA_DURHAM



# User Input.
startTime=0                     # Start time
updateBCType=0                  # Boolean for whether or not the boundary condition types will be updated over 
                                #    what is in the initial conditions files. Leave it 0 for precursors
inflowDir='cyclic'              # For inflow/outflow cases, specify the inflow direction.  Choices are 'west',
                                #   'east', 'south', 'west', 'southWest', 'northWest', 'southEast', and
                                #   'northEast'.  There is a 'cyclic' option too in case you need to change
                                #    back to cyclic or simply update the number of boundary face entries.
parallel=0                      # Boolean for whether or not the preprocessing is run in parallel.
cores=1                         # Enter the number of cores you will preprocess on.





# Copy the controlDict.1 (assuming this is the one the actual solver will start
# out with) to controlDict.  OpenFOAM reads "controlDict", not the numbered ones.
cd system
rm controlDict
ln -s controlDict.1 controlDict
cd ..


# Copy the "clean" .original initial fields to a working copy.  OpenFOAM does not
# read the ".original" initial fields--that's why they remain clean.
rm -rf $startTime
cp -rf $startTime.original $startTime


# Build the mesh.
rm -rf constant/polyMesh
blockMesh > log.blockMesh 2>&1


# The initial fields come from the precursor which is periodic on all sides.  The turbine
# case has inflow and outflow.  Call the changeDictionary utility to make the south and
# north sides inflow and outflow.
if [ $updateBCType -eq 1 ]
   then
   changeDictionary -dict system/changeDictionaryDict.updateBCs.$inflowDir -time $startTime -enableFunctionEntries > log.changeDictionary.updateBCs.$inflowDir.1 2>&1
fi

# Renumber the mesh.
echo "   -Renumbering the mesh with renumberMesh..."
renumberMesh -overwrite > log.renumberMesh 2>&1

# Decompose the mesh and solution files (serial)
echo "   -Decomposing the domain with decomposePar..."
decomposePar -cellDist -force > log.decomposePar 2>&1

# Check the mesh.
echo "   -Checking the mesh with checkMesh..."
checkMesh > log.checkMesh.1 2>&1
